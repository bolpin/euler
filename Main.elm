module Main exposing (..)

import Html exposing (Html, table, tr, th, td, text, div, ul, li)
import Arithmetic exposing (isPrime)


-- import Html.Attributes exposing (..)


main : Program Never Model Msg
main =
    Html.program
        { init = init
        , view = view
        , update = update
        , subscriptions = \_ -> Sub.none
        }


type alias Problem =
    { id : String
    , answer : Int
    }


type alias Model =
    { problems : List Problem
    }


type Msg
    = NoOp


update : Msg -> Model -> ( Model, Cmd Msg )
update msg model =
    case msg of
        NoOp ->
            model ! []


view : Model -> Html Msg
view model =
    div []
        [ table [] (viewHeader :: (viewProblems model))

        -- , div [] [ text (toString prob2) ]
        ]


viewHeader : Html Msg
viewHeader =
    tr []
        [ th [] [ text "Problem" ]
        , th [] [ text "Answer" ]
        ]


viewProblems : Model -> List (Html Msg)
viewProblems model =
    List.map viewProblem model.problems


viewProblem : Problem -> Html Msg
viewProblem problem =
    let
        answerText =
            toString problem.answer
    in
        tr []
            [ td [] [ text problem.id ]
            , td [] [ text answerText ]
            ]


prob1 : Int
prob1 =
    let
        isMultOf3Or5 num =
            case ( rem num 3, rem num 5 ) of
                ( _, 0 ) ->
                    True

                ( 0, _ ) ->
                    True

                _ ->
                    False
    in
        List.filter isMultOf3Or5 (List.range 1 999)
            |> List.sum


fibonacci : Int -> Int
fibonacci n =
    let
        fib_ args =
            case args of
                ( 0, a, _ ) ->
                    a

                ( n, a, b ) ->
                    fib_ ( n - 1, a + b, a )
    in
        fib_ ( n, 0, 1 )



-- Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 terms will be:
--
-- 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
--
-- By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms.


prob2 : Int
prob2 =
    let
        fibs =
            List.map fibonacci (List.range 0 1000)

        smalls =
            List.filter (\n -> n < 4000001) fibs

        evens =
            List.filter (\n -> rem n 2 == 0) smalls
    in
        List.sum evens



-- The prime factors of 13195 are 5, 7, 13 and 29.
--
-- What is the largest prime factor of the number 600851475143 ?


isFactor : Int -> Int -> Bool
isFactor x factor =
    rem x factor == 0


prob3 : Int
prob3 =
    let
        factors x =
            List.filter (isFactor x) (List.range 2 (x // 2))

        primeFactors x =
            List.filter isPrime (factors x)

        max =
            List.maximum (primeFactors 600851475143)
    in
        case max of
            Just m ->
                m

            Nothing ->
                -1


init : ( Model, Cmd Msg )
init =
    { problems =
        [ { id = "1", answer = prob1 }
        , { id = "2", answer = prob2 }
        , { id = "3", answer = prob3 }
        ]
    }
        ! [ Cmd.none ]
